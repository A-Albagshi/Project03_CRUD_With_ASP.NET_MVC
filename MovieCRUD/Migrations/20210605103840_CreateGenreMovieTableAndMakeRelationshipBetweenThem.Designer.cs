// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieCRUD.Data;

namespace MovieCRUD.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210605103840_CreateGenreMovieTableAndMakeRelationshipBetweenThem")]
    partial class CreateGenreMovieTableAndMakeRelationshipBetweenThem
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MovieCRUD.Models.GenreModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MovieCRUD.Models.GenreMovieModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("MovieId");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("MovieCRUD.Models.MoiveModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("backdrop_path")
                        .HasColumnType("text");

                    b.Property<int>("budget")
                        .HasColumnType("int");

                    b.Property<string>("imdb_id")
                        .HasColumnType("text");

                    b.Property<string>("overview")
                        .HasColumnType("text");

                    b.Property<string>("poster_path")
                        .HasColumnType("text");

                    b.Property<string>("release_date")
                        .HasColumnType("text");

                    b.Property<int>("revenue")
                        .HasColumnType("int");

                    b.Property<int>("runtime")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .HasColumnType("text");

                    b.Property<double>("vote_average")
                        .HasColumnType("double");

                    b.HasKey("id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MovieCRUD.Models.ReviewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MovieCRUD.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MovieCRUD.Models.GenreMovieModel", b =>
                {
                    b.HasOne("MovieCRUD.Models.GenreModel", "Genre")
                        .WithMany("GenreMovie")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieCRUD.Models.MoiveModel", "Movie")
                        .WithMany("GenreMovie")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieCRUD.Models.ReviewModel", b =>
                {
                    b.HasOne("MovieCRUD.Models.MoiveModel", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieCRUD.Models.UserModel", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
